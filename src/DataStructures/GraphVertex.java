package DataStructures;

import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

/**
 * Adapted from: Implementation of a Vertex class by Tushar Roy uploaded to GitHub on Dec 13, 2015
 * https://github.com/mission-peace/interview/blob/master/src/com/interview/graph/Graph.java
 * A class representing a graph vertex
 * @author Johnathan Tripp (╯°□°）╯︵ ┻━┻
 * @param <V> Generic type declaration for the GraphVertex class
 */
public class GraphVertex<V> implements Vertex<V>{

        private final V element;
        private final List<GraphEdge<V>> edges;
        private final List<GraphVertex<V>> adjacentVertices;

        /**
         * Public constructor for the GraphVertex class
         * @param element the element of the vertex
         */
        public GraphVertex(V element){
            this.element = element;
            edges = new ArrayList<>();
            adjacentVertices = new ArrayList<>();
        }
        
        /**
         * Adds an vertex to the set of adjacent vertices for this vertex
         * @param e the edge leading to the adjacent vertex
         * @param v the adjacent vertex to be added
         */
        public void addAdjVertex(GraphEdge<V> e, GraphVertex<V> v){
            edges.add(e);
            adjacentVertices.add(v);
        }
        
        /**
         * Returns the list of edges originating from the vertex
         * @return a List of GraphEdge objects
         */
        public List<GraphEdge<V>> getEdges() { return edges;}
        /**
         * Returns the list of adjacent vertices for the vertex
         * @return a List of GraphVertex objects
         */
        public List<GraphVertex<V>> getAdjacentVertices() { return adjacentVertices;}
        
        /**
         * Returns the element stored at the vertex
         * @return the element of the vertex
         */
        @Override
        public V getElement() {return element;}
        
        /**
         * Implementation of the Object hashCode method for generating
         * hashCode values based on the element of a Graph vertex
         * @return the hashCode value as an integer
         */
        @Override
        public int hashCode(){
            final int prime = 31;
            int result = 1;
            result = prime * result + ((element == null) ? 0 : element.hashCode());
            return result;
        }

        /**
         * Implementation of the equals method, automatically generated by NetBeans
         * @param obj an object to be compared for equality
         * @return a boolean value indicating whether two objects are equal
         */
        @Override
        public boolean equals(Object obj) {
            if (obj == null) {
                return false;
            }
            if (getClass() != obj.getClass()) {
                return false;
            }
            final GraphVertex<?> other = (GraphVertex<?>) obj;
            if (!Objects.equals(this.element, other.element)) {
                return false;
            }
            return true;
        }
    }
